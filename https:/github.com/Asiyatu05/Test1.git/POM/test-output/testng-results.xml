<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="2" total="12" passed="9" failed="1" skipped="0">
  <reporter-output>
    <line>
      <![CDATA[Pass]]>
    </line>
    <line>
      <![CDATA[Pass]]>
    </line>
  </reporter-output>
  <suite started-at="2021-10-21T17:22:08 SAST" name="Loans Test Suite" finished-at="2021-10-21T17:22:09 SAST" duration-ms="218">
    <groups>
    </groups>
    <test started-at="2021-10-21T17:22:08 SAST" name="Home Loans" finished-at="2021-10-21T17:22:08 SAST" duration-ms="48">
      <class name="loans.HomeLoans2">
        <test-method is-config="true" signature="cleanDBTwo()[pri:0, instance:loans.HomeLoans2@82de64a]" started-at="2021-10-21T17:22:08 SAST" name="cleanDBTwo" finished-at="2021-10-21T17:22:08 SAST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanDBTwo -->
        <test-method signature="fourthTest()[pri:0, instance:loans.HomeLoans2@82de64a]" started-at="2021-10-21T17:22:08 SAST" name="fourthTest" finished-at="2021-10-21T17:22:08 SAST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fourthTest -->
        <test-method signature="thirdTest()[pri:0, instance:loans.HomeLoans2@82de64a]" started-at="2021-10-21T17:22:08 SAST" name="thirdTest" finished-at="2021-10-21T17:22:08 SAST" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at loans.HomeLoans2.thirdTest(HomeLoans2.java:16)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- thirdTest -->
        <test-method is-config="true" signature="cleanDBTwo()[pri:0, instance:loans.HomeLoans2@82de64a]" started-at="2021-10-21T17:22:08 SAST" name="cleanDBTwo" finished-at="2021-10-21T17:22:08 SAST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanDBTwo -->
      </class> <!-- loans.HomeLoans2 -->
      <class name="loans.HomeLoans1">
        <test-method is-config="true" signature="cleanDB()[pri:0, instance:loans.HomeLoans1@1e1a0406]" started-at="2021-10-21T17:22:08 SAST" name="cleanDB" finished-at="2021-10-21T17:22:08 SAST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanDB -->
        <test-method signature="firstTest()[pri:0, instance:loans.HomeLoans1@1e1a0406]" started-at="2021-10-21T17:22:08 SAST" name="firstTest" finished-at="2021-10-21T17:22:08 SAST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstTest -->
        <test-method signature="homeLoanFraudTest()[pri:0, instance:loans.HomeLoans1@1e1a0406]" started-at="2021-10-21T17:22:08 SAST" name="homeLoanFraudTest" finished-at="2021-10-21T17:22:08 SAST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- homeLoanFraudTest -->
        <test-method signature="secondTest()[pri:0, instance:loans.HomeLoans1@1e1a0406]" started-at="2021-10-21T17:22:08 SAST" name="secondTest" finished-at="2021-10-21T17:22:08 SAST" duration-ms="1" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[Pass]]>
            </line>
            <line>
              <![CDATA[Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- secondTest -->
      </class> <!-- loans.HomeLoans1 -->
    </test> <!-- Home Loans -->
    <test started-at="2021-10-21T17:22:09 SAST" name="Personal Loans" finished-at="2021-10-21T17:22:09 SAST" duration-ms="13">
      <class name="loans.PersonalLoans1">
        <test-method signature="personalLoanFraudTest(java.lang.String,java.lang.String)[pri:0, instance:loans.PersonalLoans1@2892d68]" started-at="2021-10-21T17:22:09 SAST" name="personalLoanFraudTest" data-provider="getData" finished-at="2021-10-21T17:22:09 SAST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstsetusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstsetusername]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- personalLoanFraudTest -->
        <test-method signature="personalLoanFraudTest(java.lang.String,java.lang.String)[pri:0, instance:loans.PersonalLoans1@2892d68]" started-at="2021-10-21T17:22:09 SAST" name="personalLoanFraudTest" data-provider="getData" finished-at="2021-10-21T17:22:09 SAST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondsetusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondsetusername]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- personalLoanFraudTest -->
        <test-method signature="personalLoanFraudTest(java.lang.String,java.lang.String)[pri:0, instance:loans.PersonalLoans1@2892d68]" started-at="2021-10-21T17:22:09 SAST" name="personalLoanFraudTest" data-provider="getData" finished-at="2021-10-21T17:22:09 SAST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdsetusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdsetusername]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- personalLoanFraudTest -->
      </class> <!-- loans.PersonalLoans1 -->
      <class name="loans.PersonalLoans2">
        <test-method signature="eigthTest()[pri:0, instance:loans.PersonalLoans2@5ab956d7]" started-at="2021-10-21T17:22:09 SAST" name="eigthTest" finished-at="2021-10-21T17:22:09 SAST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- eigthTest -->
        <test-method signature="seventhTest()[pri:0, instance:loans.PersonalLoans2@5ab956d7]" started-at="2021-10-21T17:22:09 SAST" name="seventhTest" finished-at="2021-10-21T17:22:09 SAST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- seventhTest -->
      </class> <!-- loans.PersonalLoans2 -->
    </test> <!-- Personal Loans -->
    <test started-at="2021-10-21T17:22:09 SAST" name="Vehicle Loans" finished-at="2021-10-21T17:22:09 SAST" duration-ms="1">
    </test> <!-- Vehicle Loans -->
  </suite> <!-- Loans Test Suite -->
</testng-results>
